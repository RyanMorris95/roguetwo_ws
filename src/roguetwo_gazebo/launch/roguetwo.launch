<launch>
  <arg name="namespace" default="/"/>
  <arg name="world_name" default="roguetwo_course"/>
  <arg name="cmd_timeout" default="0.5"/>
  <arg name="gui" default="true" />

  <!-- Vehicle pose -->
  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.1"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <include file="$(find roguetwo_description)/launch/roguetwo.launch">
    <arg name="namespace" value="$(arg namespace)"/>
  </include>

  <group ns="$(arg namespace)">
    <!-- Create the world. -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find roguetwo_gazebo)/worlds/$(arg world_name).world"/>
        <arg name="gui" value="$(arg gui)"/>
    </include>


    <!-- Spawn the vehicle. -->
    <node name="spawn_vehicle" pkg="gazebo_ros" type="spawn_model"
          args="-urdf -param robot_description -model roguetwo
                -gazebo_namespace /$(arg namespace)/gazebo
                -x $(arg x) -y $(arg y) -z $(arg z)
                -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

    <!-- Load the joint controllers. One of these publishes the joint states
         to joint_states. -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner"
          args="$(find roguetwo_gazebo)/config/em_3905_joint_ctrlr_params.yaml"/>

    <!-- Launch gazebo odometry node -->
    <node name="gazebo_odometry" pkg="roguetwo_gazebo" type="gazebo_odometry.py"/>

    <!-- Control the steering, axle, and shock absorber joints. -->
    <node name="ackermann_controller" pkg="roguetwo_gazebo"
          type="ackermann_controller">
      <param name="cmd_timeout" value="$(arg cmd_timeout)"/>
      <rosparam file="$(find roguetwo_gazebo)/config/em_3905_ackermann_ctrlr_params.yaml" command="load"/>
    </node>
  </group>


</launch>
